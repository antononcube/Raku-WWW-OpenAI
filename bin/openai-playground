#!/usr/bin/env raku
use v6.d;

use WWW::OpenAI;

my %*SUB-MAIN-OPTS =
        :named-anywhere,
        # allow named variables at any location
        ;

#| Text processing using the OpenAI API.
multi sub openai-front(Str $text,                                #= Text to be processed.
                       Str :$path = 'chat/completions',          #= Path, one of 'chat/completions', 'images/generations', or 'moderations'.
                       UInt :$n = 1,                             #= Number of completions or generations.
                       UInt :$max-tokens = 16,                   #= The maximum number of tokens to generate in the completion.
                       Str :m(:$model) is copy = 'Whatever',     #= Model.
                       Str :r(:$role) is copy = 'user',          #= Role.
                       Real :t(:$temperature) = 0.7,             #= Temperature.
                       Str :$response-format = 'url',            #= The format in which the generated images are returned; one of 'url' or 'b64_json'.
                       Str :a(:$auth-key) is copy = 'Whatever',  #= Authorization key (to use OpenAI API.)
                       UInt :$timeout= 10,                       #= Timeout.
                       Str :$format is copy = 'json',            #= Format of the result; one of "json" or "hash".
                       Str :$method is copy = 'cro',             #= Method for the HTTP POST query; one of "cro" or "curl".
                       ) {

    if $text.chars == 0 {
        note 'Nothing.';
        return;
    }

    if $auth-key eq 'Whatever' {
        if %*ENV<OPENAI_API_KEY>:exists {
            $auth-key = %*ENV<OPENAI_API_KEY>;
        } else {
            note 'Cannot find OpenAI authorization key. ' ~
                    'Please provide a valid key to the argument auth-key, or set the ENV variable OPENAI_API_KEY.';
            $auth-key = ''
        }
    }

    my $res =
            openai-playground($text,
                    :$path,
                    model => $model eq 'Whatever' ?? Whatever !! $model,
                    role => $role eq 'Whatever' ?? Whatever !! $role,
                    :$n,
                    :$max-tokens,
                    :$response-format,
                    :$temperature,
                    :$auth-key,
                    :$timeout,
                    :$format,
                    :$method);

    if $format.lc âˆˆ <hash raku> {
        say $res.raku;
    } else {
        say $res;
    }
}

#| Text processing using the OpenAI API.
multi sub MAIN(Str $text,                                #= Text to be processed.
               Str :$path = 'chat/completions',          #= Path, one of 'chat/completions', 'images/generations', or 'moderations'.
               UInt :$n = 1,                             #= Number of completions or generations.
               UInt :$max-tokens = 16,                   #= The maximum number of tokens to generate in the completion.
               Str :m(:$model) is copy = 'Whatever',     #= Model.
               Str :r(:$role) is copy = 'user',          #= Role.
               Real :t(:$temperature) = 0.7,             #= Temperature.
               Str :$response-format = 'url',            #= The format in which the generated images are returned; one of 'url' or 'b64_json'.             
               Str :a(:$auth-key) is copy = 'Whatever',  #= Authorization key (to use OpenAI API.)
               UInt :$timeout= 10,                       #= Timeout.
               Str :$format is copy = 'json',            #= Format of the result; one of "json" or "hash".
               Str :$method is copy = 'cro',             #= Method for the HTTP POST query; one of "cro" or "curl".
               ) {
    return openai-front($text, :$model, :$path, :$n, :$max-tokens, :$role, :$temperature, :$response-format, :$auth-key, :$timeout, :$format, :$method);
}

multi sub MAIN
#= Command given as a sequence of words.
(*@words,
 Str :m(:$model) is copy = 'Whatever',     #= Model.
 Str :$path = 'chat/completions',          #= Path, one of 'chat/completions', 'images/generations', or 'moderations'.
 UInt :$n = 1,                             #= Number of completions or generations.
 UInt :$max-tokens = 16,                   #= The maximum number of tokens to generate in the completion.
 Str :r(:$role) is copy = 'user',          #= Role.
 Real :t(:$temperature) = 0.7,             #= Temperature.
 Str :$response-format = 'url',            #= The format in which the generated images are returned; one of 'url' or 'b64_json'.
 Str :a(:$auth-key) is copy = 'Whatever',  #= Authorization key (to use OpenAI API.)
 UInt :$timeout= 10,                       #= Timeout.
 Str :$format is copy = 'json',            #= Format of the result; one of "json" or "hash"
 Str :$method is copy = 'cro',             #= Method for the HTTP POST query; one of "cro" or "curl".
 ) {
    return openai-front(@words.join(' ').Str, :$model, :$path, :$n, :$max-tokens, :$role, :$temperature, :$response-format, :$auth-key, :$timeout, :$format, :$method);
}